#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{units}

\usepackage{fancyhdr}
\pagestyle{fancy}
\usepackage{lastpage}
\lhead{}
\rhead{}
\renewcommand{\headrulewidth}{0pt}
\cfoot{\fontsize{8pt}{8pt} \selectfont 2015-04-30 --- Nicholas Paun: Chemlogic --- \thepage\ of \pageref{END}}

%\usepackage{anysize}
%\marginsize{1in}{1in}{0.5in}{0.5in}

\usepackage[margin=1.0in,includefoot]{geometry}
\topmargin 0pt
\headsep 0pt
\headheight 0pt
\usepackage{titlesec}
\titleformat{\section}
  {\normalfont\fontsize{13.5}{15}\bfseries\scshape}{\thesection}{1em}{}
\usepackage{url}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing double
\use_hyperref true
\pdf_title "Chemlogic: A Logic Programming Computer Chemistry System"
\pdf_author "Nicholas Paun"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle false
\papersize letterpaper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 2
\use_package cancel 2
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic true
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\topmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
\begin_inset VSpace -0.75in
\end_inset

Chemlogic:
\begin_inset Newline newline
\end_inset

 A Logic Programming Computer Chemistry System
\end_layout

\begin_layout Author

\emph on
Second Edition
\emph default

\begin_inset Newline newline
\end_inset

Nicholas Paun
\end_layout

\begin_layout Date
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
thispagestyle{fancy}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace -1in
\end_inset


\end_layout

\begin_layout Section*
\begin_inset Note Note
status open

\begin_layout Plain Layout
$$$
\end_layout

\end_inset


\begin_inset Formula $*$
\end_inset

 Abstract
\end_layout

\begin_layout Standard

\noun on
Chemlogic is a logic program for computer chemistry
\noun default
 that performs stoichiometric calculations, balances and completes equations,
 and converts between formulas and names.
 The program has applications in education, particularly as a study tool.
 Features are implemented using a chemical information database, linear
 equation solver, and grammatical rules.
 Guidance is provided for resolving errors in user input.
 Chemlogic is available on Android and the Web.
\end_layout

\begin_layout Section*
Background
\end_layout

\begin_layout Standard

\noun on
\begin_inset Note Note
status open

\begin_layout Plain Layout

\noun on
NEEDS TO BE RENEWED
\end_layout

\end_inset

 In high school Chemistry
\noun default
, students learn to write formulas and names for chemical compounds and
 to write and balance chemical equations.
 These concepts are simple, but implementing a program to do this was an
 interesting task.
 Algorithms were researched, adapted to chemistry problems and implemented
 in Prolog to create a program that could be useful in education.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The goal was to extend the program to improve its applicability to education,
 while maintaining the existing structure.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Design and Implementation
\end_layout

\begin_layout Standard

\noun on
User input is parsed
\noun default
 into a form that can be easily manipulated and transformed.
 A parser recognizes a formal grammar describing valid user input.
 In Prolog, parsers are implemented using DCGs (Definite Clause Grammars),
 which provide a simplified syntax for creating logical clauses that process
 a grammar using difference lists, an efficient representation (e.g.
 concatenation in 
\begin_inset Formula $\mathrm{O}(1)$
\end_inset

).
\begin_inset CommandInset citation
LatexCommand cite
key "triska:dcg"

\end_inset


\end_layout

\begin_layout Standard
Difference lists consist of an instantiated part (the head) and an uninstantiate
d part (the tail), which is always paired with the rest of the lists.
 Difference lists are a complex concept and are usually abstracted away
 by DCG syntax.
 
\end_layout

\begin_layout Standard
In DCG clauses, the head of a grammatical rule is unified with the input
 and any remaining data is unified with the tail, which is passed to the
 next clause until the parsing is completed.
 If any clause fails, Prolog will backtrack to find another clause that
 can satisfy the grammar.
 If no clause is found, then the parsing fails.
\end_layout

\begin_layout Standard
To make a useful program, it is not enough to simply decide whether or not
 a given input conforms to a grammar --- internal representations must be
 created.
 Commonly, Abstract Syntax Trees are used for this purpose.
 Chemlogic uses a pseudo-AST to record the structure of an equation, as
 well as lists containing useful information (e.g.
 the elements contained in an equation).
 DCGs provide extra arguments for this purpose.
\begin_inset Newline newline
\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Itemize
Explain how ASTs are the basis of all of Chemlogic's features and how features
 can be composed by transmitting ASTs between them.
\end_layout

\begin_layout Itemize
AST is used to identify reaction type, to complete reaction, which can then
 be balanced.
\end_layout

\begin_layout Itemize
AST can be used in stoichiometry to determine molar mass and quantities
 to be used.
\end_layout

\begin_layout Itemize
Conversion between multiple representations is made through ASTs.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Reaction type analysis in Chemlogic is divided into 2 parts: completing
 reactions and identifying reaction type and predicting whether it will
 occur.
\end_layout

\begin_layout Plain Layout
Prolog's syntax unification capabilities are used to select the predicate
 the predicate for the type of reaction represented by the AST.
\end_layout

\begin_layout Plain Layout
Once the equation and its component compounds and ions are matched, the
 reaction can be completed.
\end_layout

\begin_layout Plain Layout
Structures are transformed to represent the new arrangements of compounds
 and ions present in the products of the equation.
 Procedures specific to the types of compounds involved (e.g.
 ionic) are called to determine the correct formulas and subscripts for
 the compounds.
\end_layout

\begin_layout Itemize
In the case of ionic compounds, the method used is identical to the typical
 manual methods.
 The charge of the metal becomes the subscript of the non-metal and vice-versa,
 then formula is reduced to lowest terms by dividing by the GCD.
\end_layout

\begin_layout Plain Layout
The reactivity series is used to predict whether a reaction will occur.
 To allow for numerical comparison, the position of an element in the series
 is recorded as an integer index.
\end_layout

\begin_layout Plain Layout
The reaction type analysis procedures are used by different parts of the
 program.
 The user interfaces request information about the type and reactivity predictio
n of the equation in order to provide useful information.
 The balancer uses the reaction completion support to produce a complete
 structure for balancing, if only part of an equation is provided.
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\noun on
Reaction type analysis
\noun default
 is implemented by syntactically unifying the Abstract Syntax Tree generated
 by parsing an equation with a template representing a certain type of chemical
 reaction.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Talk about what syntactic unification is, exactly.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard

\noun on
Balancing of chemical equations
\noun default
 is usually done by inspection.
\begin_inset CommandInset citation
LatexCommand cite
key "sandner2008bc"

\end_inset

 This process cannot easily be used in a program because it is unsystematic:
 as coefficients may be corrected again during the balancing, the order
 and steps performed may vary from equation to equation.
\end_layout

\begin_layout Standard
Chemlogic uses an elegant process, using a system of linear equations.
 One linear equation is created for every element in a chemical equation,
 with the number of occurrences of the element in each formula representing
 a coefficient, multiplied by an unknown (the chemical equation coefficient).
\begin_inset CommandInset citation
LatexCommand cite
key "tuckerman:nyu"

\end_inset

 To make the system solvable, the first coefficient is set to 1.
 The solution is always reduced to lowest whole number terms.
\end_layout

\begin_layout Standard
This process can be made even simpler to program by creating a homogeneous
 linear system, where the terms representing reactants have positive sign
 and terms representing products have negative sign.
 These equations are all equal to 0.
 These systems are commonly solved by converting them to a matrix and applying
 Gaussian elimination.
\begin_inset CommandInset citation
LatexCommand cite
key "eigenstate:chembalancerjs"

\end_inset


\end_layout

\begin_layout Standard
In Chemlogic, a matrix is produced from structures created by the parser
 and lookup tables.
 The matrix is converted into a system of linear equations, which is then
 provided to the built-in CLP(q) facility, which can solve constraints over
 rational numbers.
\begin_inset CommandInset citation
LatexCommand cite
key "holzbaur:clpq"

\end_inset

 This process is less efficient, but allows for code reuse, saving programmer
 work.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Stoichiometry: 
\end_layout

\begin_layout Itemize
The chemical equation parsers were extended to allow the user to provide
 the quantity of each molecular species in an equation.
\end_layout

\begin_layout Itemize
A new grammar was written for the purposes of manipulating quantities.
\end_layout

\begin_layout Itemize
The queries which could be made when limiting reactant analysis is performed,
 are very complex.
\end_layout

\begin_layout Itemize
A separate list of queries is provided by the user.
\end_layout

\begin_layout Itemize
Stoichiometry begins by manipulating the ASTs generated by balancing.
\end_layout

\begin_layout Itemize
First, it is determined whether limiting reactant analysis is necessary.
 (It is necessary if the quantity of more than compound is provided).
\end_layout

\begin_layout Itemize
If so, the limiting reactant is determined by a simple systematic algorithm,
 which applies even if the units of the input quantities are different.
 (UC Davis Chemwiki).
 
\end_layout

\begin_deeper
\begin_layout Itemize
The quantities of each reactant are converted to moles, then divided by
 the coefficient of the compound.
\end_layout

\begin_layout Itemize
The compound with the lowest ratio is the limiting reactant.
\end_layout

\begin_layout Itemize
The number of moles of the limiting reactant are used to answer the queries.
\end_layout

\end_deeper
\begin_layout Itemize
If there is no limiting reactant, then the moles of the provided compound
 are used to answer the queries.
\end_layout

\begin_layout Itemize
Procedures are implemented for performing all of the unit conversions necessary.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Support for concentrations of chemicals is implemented.
\end_layout

\begin_layout Itemize
Many patterns are supported.
\end_layout

\end_deeper
\begin_layout Itemize
Chemlogic will always produce results with the correct number of significant
 figures.
 The number of significant figures in each input value is determined and
 recorded.
 Each unit conversion procedure determines the maximum number of significant
 figures that can be preserved.
 When user output is produced, numbers are rounded to the correct precision.
\end_layout

\begin_layout Itemize
Producing a user-friendly Web interface that can handle complex stoichiometric
 calculations is a significant challenge.
\end_layout

\begin_layout Itemize
Unlike the interfaces for balancing and converting formulas to names, which
 are just simple wrappers around the underlying API, the stoichometry user
 interface is very user interactive and much code had to be added to prepare
 the correct queries to send to the API.
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\noun on
Syntax errors
\noun default
 cannot simply cause a program to fail --- clear identification and explanation
 of an error is necessary.
 When a predicate that must succeed for a given input to be valid fails,
 a syntax error exception is thrown, containing a code name for the error
 and whatever remains in the tail (what could not be parsed).
 The exception aborts the execution of the program and is then passed to
 the error handling module.
 It first attempts to localize the error by highlighting only the problematic
 part within the tail.
 Different rules are used depending on the type of the first character (e.g.
 an invalid letter suggests a chemistry mistake, while an invalid symbol
 suggests a typo).
 The combination of an error code and character type is used to find the
 correct error message to provide to the user.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\noun on
Multiple interfaces are supported
\noun default
 in Chemlogic.
 Currently, Android, command-line and Web interfaces have been implemented.
 In order to show correct symbols and formatting (e.g.
 subscripts) in each interface, there is an output formatting module that
 allows each parser to automatically use the correct symbols.
 The error handling module re-throws its syntax errors to a simple error
 handler for each interface.
\begin_inset Newline newline
\end_inset


\noun on

\begin_inset Newline newline
\end_inset

The Android App was developed
\noun default
 to make Chemlogic available as a study tool to more users.
 The App consists of a user-interface, implemented in Java, using the Android
 APIs, and a package consisting of the cross-compiled code of Chemlogic
 and its dependencies.
 The user interface communicates with Chemlogic through a UNIX pipe.
 Upon receiving the solution from Chemlogic, the interface renders the formattin
g of the result and displays it.
 
\end_layout

\begin_layout Standard
The Chemlogic package contains a copy of the Chemlogic command-line interface,
 compiled as a stand-alone application with an embedded Prolog interpreter
 in its binary, some necessary Linux libraries and an initialization script.
 As cross-compiling these programs for various Android platforms and CPU
 architectures is a complicated process, an automated procedure is used
 to build the package, in order to reduce errors.
 When loaded, the App executes the initialization script, which runs the
 dynamic linker to locate and link Chemlogic with the provided libraries
 and then executes it.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Android NOTES
\end_layout

\begin_layout Plain Layout
Using the existing, unmodified code of Chemlogic in the App simplifies the
 maintenance of the program and the development of new features.
\end_layout

\begin_layout Subsubsection
Summary
\end_layout

\begin_layout Plain Layout
The Chemlogic App for Android was developed to allow users to use the program
 on a mobile device.
 Due to the popularity of mobile devices and the convience of mobile application
s, this improvement greatly increases the number of users who would use
 the program and enables students to easily use Chemlogic as a study tool
 for chemistry classes.
 (OK)
\end_layout

\begin_layout Plain Layout
The existing code of Chemlogic, written in Prolog, was cross-compiled for
 the processors used in Android devices and is used unmodified, simplifying
 the development of new features.
 (OK)
\end_layout

\begin_layout Plain Layout
The App consists of a user-interface, implemented in Java, using the Android
 APIs, and a system package consisting of the cross-compiled Chemlogic code,
 and its dependencies.
 (OK)
\end_layout

\begin_layout Subsubsection
The Implementation of the User Interface and the System Package
\end_layout

\begin_layout Plain Layout
The user interface renders the design of the app (textboxes, buttons, etc.),
 verifies the input to ensure that it does not contain invalid Prolog syntax
 and then communicates with Chemlogic through a UNIX pipe.
 Upon receiving the response, it renders the formatting of the result (e.g.
 subscripts, arrows and colored error messages) and displays it.
 (OK) The user interface also adds an extra row of keys to the keyboard
 which contains symbols commonly used in chemical equations and formulas.
 (DK)
\end_layout

\begin_layout Plain Layout
The system package, which is approximately 4 MB in size, contains a copy
 of Chemlogic, compiled as a stand-alone application (meaning that it includes
 the Prolog interpreter in its binary), some required Linux libraries and
 an initialization script.
 (OK) When loaded, the App interface executes the initialization script,
 which starts Chemlogic by running the dynamic linker to locate and link
 Chemlogic with the provided libraries and then executes it.
 (OK) The cross-compilation process required to build the system package
 is extremely complicated, so it has been automated to reduce developer
 work and eliminate errors.
 Because the Android platform does not install the assets provided with
 the App, a procedure was implemented that verifies whether latest version
 of the system package is present and will extract the files and install
 them, if necessary.
 (DK)
\end_layout

\begin_layout Plain Layout
Once Chemlogic is installed and started, the user interface writes a command
 to the pipe, when Chemlogic reads.
 Chemlogic writes its answer to the pipe, which the interface reads.
 This method could be replaced with bindings between Prolog and Java, which
 would simplify the development of the App, but would increase the complexity
 of the cross-compilation process.
 (DK)
\end_layout

\begin_layout Subsubsection
Interprocess Communication in the App 
\end_layout

\begin_layout Plain Layout
When a user interacts with a command-line program, patterns are recognized
 by both the human user and the program itself: When the user enters a command,
 he presses ENTER.
 Now the system sees that the user has finished typing and it processes
 the input and displays its response.
 When the interactive prompt is displayed, the user sees that the system
 is ready to receive another query.
 The user interface and the Android App use these patterns, as well, allowing
 existing code to be used with minor modifications.
 (DK)
\end_layout

\end_inset


\noun on
Metaprogramming is an excellent feature in Prolog
\noun default
.
 Metaprogramming allows a program to write or manipulate parts of itself.
 An important aspect of metaprogramming is the ability to manipulate code
 as a data structure --- this is used to translate simple facts from a database
 into various grammatical rules.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
CUT? 
\end_layout

\end_inset

Prolog also allows a programmer to define new operators that extend the
 programming language and provide simple syntax for repetitive tasks.
 Chemlogic defines an operator that throws a syntax error, if a predicate
 fails, and another operator that catches syntax errors and runs the correct
 handler for the current interface.
 Defining operators makes Chemlogic's code easier to read and understand.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
CUT
\end_layout

\end_inset

 Chemlogic also implements a very simple Domain Specific Language (DSL)
 on top of Prolog, using metaprogramming techniques.
 This DSL is a proof-of-concept and consists of three rules that provide
 simple syntax for a user to query Chemlogic.
 DSL clauses can be composed into very simple programs and the full features
 of Prolog can be combined with DSL rules, if needed.
\end_layout

\begin_layout Section*
Discussion
\end_layout

\begin_layout Standard

\noun on
Performance was analyzed
\noun default
 in Chemlogic by counting inferences (provided by 
\family typewriter
time/1
\family default
) used by different algorithms for various problem sizes.
 Algorithms were compared on their fixed inferences (intercept), inferences
 per item (slope) and to ensure that their complexities were not exponential.
\end_layout

\begin_layout Standard
The time taken by the algorithms used in Chemlogic could not be analyzed
 because the difference between the performance of algorithms on typical
 problem sizes was immeasurably small.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Need new discussion.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\noun on
\begin_inset Note Note
status open

\begin_layout Plain Layout
$$
\end_layout

\end_inset

 Further research and development
\noun default
 --- It would be interesting to compare the balancing algorithm used, with
 one that attempts to balance equations by trial-and-error.
 A brute-force algorithm is logically unsatisfying and its difficulty increases
 exponentially (
\begin_inset Formula $\mathrm{O}(n^{m})$
\end_inset

).
 The time taken by repeated trials may be unnoticeable on new computers,
 however.
 
\end_layout

\begin_layout Standard
Currently, Chemlogic attempts to distinguish sub-classes of errors to make
 error messages more specific.
 A topic for future development would be to substitute pieces of information
 from incorrect input into messages, allowing the program to explain exactly
 what is wrong with the input, as opposed to a general error message.
\end_layout

\begin_layout Standard
The parsers currently implemented in Chemlogic process user input directly,
 as character lists, without a tokenization process.
 Using new features available in version 7 of SWI-Prolog, a simple and fast
 procedure could be implemented to separate user input into space-delimited
 parts.
 The correct parser for the tokenized input could then be easily identified
 by syntactic unification, significantly reducing the number of tests and
 operations required to perform parsing.
\end_layout

\begin_layout Standard
An important extension to Chemlogic, would be to add support for automatically
 generating and marking random chemistry problems.
 This feature could be used by students to review concepts and by teachers
 to automate the marking of simple problems.
 With the addition of support for reaction type analysis, the preliminary
 work for this feature has been completed.
 The reaction type, equation, formula and name grammars in Chemlogic could
 be extended to produce random valid structures, in addition to simply recognizi
ng and converting them.
 These structures could then be included in problems presented by a new
 user interface.
\end_layout

\begin_layout Standard
The program could be extended to add more chemistry features, including
 support for: electronic structures of atoms, structural formulas and the
 names of more complex organic compounds, and equilibrium calculations and
 analysis.
\end_layout

\begin_layout Section*
Conclusions
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Itemize
Briefly, why Prolog was chosen.
 (SHT)
\end_layout

\begin_layout Itemize
New pieces fit together well in the modular structure.
 (OK)
\end_layout

\begin_layout Itemize
New features were implemented by manipulating abstract syntax trees generated
 by previously developed parsers.
 (OK)
\end_layout

\begin_layout Itemize
This allowed new features to be integrated into the system and to be used
 in flexible ways.
 (OK)
\end_layout

\begin_layout Itemize
The existing design of Chemlogic was very flexible and did not require much
 rewriting.
 (OK)
\end_layout

\begin_layout Itemize
Most changes consisted of modifying the parsers to expose more information
 to other parts of the program.
 (OK)
\end_layout

\begin_layout Itemize
Composable.
\end_layout

\begin_layout Itemize
The output formatting module allowed Chemlogic to produce output for the
 Android interface without requiring significant modifications.
\end_layout

\begin_layout Itemize
Running the original cross-compiled code of Chemlogic on the Android platform
 and communicating over Unix pipes allowed the entire capabilities of Chemlogic
 to be made available on the Android platform, without platform-specific
 modifications.
 (DK)
\end_layout

\begin_deeper
\begin_layout Itemize
Running the original cross-compiled code of Chemlogic on the Android platform
 and communicating over Unix pipes allowed new features and bugfixes to
 be easily transferred to the Android platform, without requiring customized
 modifications.
 (DK)
\end_layout

\end_deeper
\begin_layout Plain Layout
Bob
\end_layout

\begin_layout Itemize
Features in Chemlogic are based upon the manipulation of Abstract Syntax
 Trees generated by various parsers.
 (OK)
\end_layout

\begin_layout Itemize
New additions to the program were mostly implemented through the manipulation
 of Abstract Syntax Trees.
\end_layout

\begin_layout Itemize
The Abstract Syntax Trees generated by the various parsers are the basis
 of...
\end_layout

\begin_layout Plain Layout
Cal
\end_layout

\begin_layout Itemize
The system is organized such that functionality and algorithms are implemented
 through the manipulation of Abstract Syntax Trees.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\noun on
Prolog was chosen
\noun default
 as the language for Chemlogic because it has many features that are useful
 for implementing this type of program.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
REDO
\end_layout

\end_inset

Prolog includes support for DCGs, which allow a programmer to implement
 a parser using a very simple syntax, without requiring manual parser writing.
 Using DCGs, it is easy to write grammatical rules, test them and add more
 types of input.
 Chemlogic used many advanced features of DCGs and their underlying abstractions.
\end_layout

\begin_layout Standard
SWI-Prolog's CLP(q) facility made solving systems of linear equations extremely
 simple.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
REDO
\end_layout

\end_inset

Using a logic programming language, such as Prolog, enables the programmer
 to describe the results, instead of the process.
\begin_inset CommandInset citation
LatexCommand cite
key "wielemaker:2011:tplp"

\end_inset

 In practice, writing in Prolog avoids the need for manual programming of
 loops and other imperative constructs, most often resulting in a well-written,
 succinct solution requiring few lines of code.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
REDO
\end_layout

\end_inset

 Prolog also has very strong support for metaprogramming, which was used
 in a few places in Chemlogic, where the amount of boilerplate code needed
 was reduced, making code easier to read.
\begin_inset Newline newline
\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
ASTs
\end_layout

\begin_layout Plain Layout
The design and implementation of Chemlogic is based on the manipulation
 of the Abstract Syntax Trees generated by various parsers.
 This design allows for modules to be composed together.
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
The manipulation of ASTs is one of the most important aspects of the design
 of Chemlogic.
 Each module of Chemlogic either transforms the tree or uses it to perform
 calculations.
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
As each module is written to either transform, or perform calculations using
 a consistent Abstract Syntax Trees.
\end_layout

\begin_layout Plain Layout
As the design and implementation of Chemlogic is based on the m
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
Each module of Chemlogic is designed to transform the Abstract Syntax Trees
 generated by various parsers, allowing for modules to be composed together
 to ex
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
In this way, existing modules can make use of new functionality, new features
 can be implemented based on existing calculations and structures and modules
 can be connected to produce integrated user interfaces.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\noun on
Each module of Chemlogic
\noun default
 is designed to transform the standardized Abstract Syntax Trees generated
 by the parsers, allowing for modules to be composed together, each adding
 a piece of functionality as structures are passed from predicate to predicate.
 In this way, existing modules can make use of new functionality, new features
 can be implemented based on existing calculations and structures and modules
 can be connected to as part of integrated user interfaces.
\end_layout

\begin_layout Standard
New features were integrated into the existing structure of Chemlogic without
 requiring significant rewriting of the code.
 Most changes consisted of modifying parsers and other procedures to expose
 more information to other modules of the program.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\noun on
Chemlogic was successfully extended
\noun default
 to implement new features, based upon the existing well-designed and modular
 structure, and can now perform stoichiometric calculations, convert chemical
 quantities between units and complete chemical reactions.
\begin_inset CommandInset label
LatexCommand label
name "END"

\end_inset


\end_layout

\begin_layout Standard
\start_of_appendix
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\begin_layout Plain Layout


\backslash
cfoot{
\backslash
fontsize{8pt}{8pt} 
\backslash
selectfont 2015-04-30 --- Nicholas Paun: Chemlogic --- 
\backslash
thepage
\backslash
 of 
\backslash
pageref{APPEND}} 
\end_layout

\end_inset


\end_layout

\begin_layout Section*
\begin_inset Note Note
status open

\begin_layout Plain Layout
$$
\end_layout

\end_inset

 Earlier Work
\end_layout

\begin_layout Standard
The original version of Chemlogic was an experimental program I developed
 in 2012, to simplify my Science homework.
 
\end_layout

\begin_layout Standard
Based on these experiments, the project was extended in 2013 and 2014.
 The program was rewritten in Prolog, new algorithms were studied and adapted
 and many new features were implemented.
 The current modular design and structure of Chemlogic was implemented in
 Version 1, which supported balancing chemical equations, converting chemical
 names to formulas, and vice-versa.
 This version was presented at the 2014 CWSF in Windsor, where it received
 a Bronze Excellence Award.
\end_layout

\begin_layout Standard
In 2014 and 2015, Chemlogic was further developed to significantly expand
 the project, by continuing to improve existing features, adding a new user
 interface and adding support for higher levels of high school Chemistry.
 Version 2 of Chemlogic introduced the Android user interface and support
 for stoichiometric calculations, chemical unit conversions and reaction
 type analysis.
\end_layout

\begin_layout Section*
\begin_inset Note Note
status open

\begin_layout Plain Layout
$$$
\end_layout

\end_inset

 Acknowledgments
\end_layout

\begin_layout Standard
I would like to thank the many people who gave advice and helped with the
 project.
\end_layout

\begin_layout Standard
I am particularly grateful for the valuable assistance provided by Dr.
 Peter Tchir, now retired, my Physics, Chemistry and Computer Science teacher.
 His help and advice, especially with algorithms, and his support for my
 Computer Science projects helped make this program possible.
\end_layout

\begin_layout Standard
I would also like to thank Mr.
 Jason Peil for his assistance in designing and printing the display, and
 Mr.
 Greg Osadchuk for his input and assistance regarding the visual presentation.
\end_layout

\begin_layout Section*
\begin_inset Note Note
status open

\begin_layout Plain Layout
$$$
\end_layout

\end_inset

 Obtaining Chemlogic / Contact
\end_layout

\begin_layout Standard
Nicholas Paun <
\begin_inset Flex URL
status open

\begin_layout Plain Layout

np@icebergsystems.ca
\end_layout

\end_inset

>
\end_layout

\begin_layout Standard
Chemlogic is open-source software.
 A copy of the program and additional information is available at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://icebergsys.ca/chemlogic
\end_layout

\end_inset


\end_layout

\begin_layout Section*
\begin_inset Note Note
status open

\begin_layout Plain Layout
$
\end_layout

\end_inset

 References
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TWIDDLE THE REFS.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "chemlogic"
options "plainurl"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "APPEND"

\end_inset


\end_layout

\end_body
\end_document
