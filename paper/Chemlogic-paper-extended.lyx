#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{units}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref page
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 2
\use_package cancel 2
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Chemlogic: A Logic Programming Computer Chemistry System
\end_layout

\begin_layout Author
Nicholas Paun
\begin_inset Newline newline
\end_inset


\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

<np@icebergsystems.ca>
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Gr.
 12, Mount Sentinel Secondary School
\end_layout

\begin_layout Date
April 10, 2015
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Abstract
Chemlogic is a logic program for performing stoichiometric calculations,
 converting chemical quantities between units, balancing and completing
 chemical equations and converting chemical formulas to and from chemical
 names.
 These features are implemented using a database of chemical information,
 a set of grammars, and a linear equation solver.
 Chemlogic can detect and provide guidance for resolving syntax and other
 errors.
 It is available as an Android App (designed as a study tool for chemistry
 students), a Web interface and a command-line domain-specific language.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Section
Curricular Connections
\end_layout

\begin_layout Subsection
Science 9
\end_layout

\begin_layout Itemize
Names and formulas of ionic compounds.
\begin_inset Newline newline
\end_inset

(Including support for multivalent metals and polyatomic groups.)
\end_layout

\begin_layout Subsection
Science 10
\end_layout

\begin_layout Itemize
Names and formulas of binary covalent compounds.
\end_layout

\begin_layout Itemize
Names and formulas of acids.
\end_layout

\begin_layout Itemize
Naming conventions for some simple organic compounds.
\begin_inset Newline newline
\end_inset

(Including support for alkanes and alcohols.)
\end_layout

\begin_layout Itemize
Balancing of chemical equations in word or symbolic form.
\end_layout

\begin_layout Itemize
Identification of reaction types.
\begin_inset Newline newline
\end_inset

(Including support for neutralization, double replacement, single replacement,
 synthesis, decomposition and combustion reactions.)
\end_layout

\begin_layout Itemize
Determining whether a reaction will take place using the reactivity series.
\end_layout

\begin_layout Itemize
Completion of common chemical reactions.
\begin_inset Newline newline
\end_inset

(Including support for neutralization, double replacement and single replacement
 reactions).
\end_layout

\begin_layout Subsection
Chemistry 11
\end_layout

\begin_layout Itemize
Names and formulas of alkenes and ionic compound hydrates.
\end_layout

\begin_layout Itemize
Unit conversion for chemical quantities.
\begin_inset Newline newline
\end_inset

(Including support for mass, moles, volume of gas, volume of solution and
 concentration).
\end_layout

\begin_layout Itemize
Stoichiometric calculations.
\end_layout

\begin_layout Itemize
Limiting reactant analysis and calculations involving the stoichiometry
 of excess quantities.
\end_layout

\begin_layout Standard
Not yet implemented:
\end_layout

\begin_layout Itemize
Structural formulas and naming conventions for organic chemistry; structures
 of polyelectronic atoms
\end_layout

\begin_layout Section
Design and Algorithms
\end_layout

\begin_layout Standard
Chemlogic implements two major features: Balancing symbolic or word equations
 and converting chemical names to formulas and vice versa.
 These operations are done using two interesting algorithms, which will
 be discussed below.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
In order to create a useful system, many other parts had to be written including
 error handling and user interfaces.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Balancing Chemical Equations with Systems of Linear Equations
\begin_inset CommandInset label
LatexCommand label
name "sub:Balancing-Chemical"

\end_inset


\end_layout

\begin_layout Subsubsection
Balancing by Inspection
\end_layout

\begin_layout Standard
Chemical equations are most commonly balanced 
\series bold
by inspection
\series default
.
 
\begin_inset CommandInset citation
LatexCommand cite
key "sandner2008bc"

\end_inset


\series bold
 
\series default
In this process, a single element is balanced over the entire equation.
 Then, more elements are balanced and the resulting coefficients corrected
 until the entire equation is balanced.

\series bold
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
An example of balancing by inspection
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{eqnarray}
\mathrm{C_{2}H_{6}+O_{2}} & \rightarrow & \mathrm{CO_{2}+H_{2}O}\label{eq:ethane-unbal}\\
\mathrm{C_{2}H_{6}+O_{2}} & \rightarrow & \mathrm{CO_{2}+3H_{2}O}\label{eq:ethane-h}\\
\mathrm{C_{2}H_{6}+O_{2}} & \rightarrow & \mathrm{2CO_{2}+3H_{2}O}\label{eq:ethane-c}\\
\mathrm{C_{2}H_{6}+\nicefrac{7}{2}O_{2}} & \rightarrow & \mathrm{2CO_{2}+3H_{2}O}\label{eq:ethane-o}\\
2\mathrm{C_{2}H_{6}+7O_{2}} & \rightarrow & \mathrm{4CO_{2}+6H_{2}O}\label{eq:ethane-bal}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:ethane-unbal"

\end_inset

 The combustion of ethane, 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:ethane-h"

\end_inset

 There are 6 hydrogens on the left-hand side, so there must be 6 on the
 right (3 groups of 2), 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:ethane-c"

\end_inset

 There are 2 carbons on the left, so there must be 2 on the right, 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:ethane-o"

\end_inset

 Now there are 7 oxygens on the right (2 groups of 2 = 4 from 
\begin_inset Formula $\mathrm{CO_{2}}$
\end_inset

 and 3 from 
\begin_inset Formula $\mathrm{H_{2}O}$
\end_inset

), but oxygens come only in groups of 2, 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:ethane-bal"

\end_inset

Each coefficient must be multiplied by 2 to clear the fraction.
\end_layout

\end_inset

This process is not very useful for implementing a program because it is
 not systematic: steps may be performed differently or in different orders,
 depending on the equation to be balanced.
 Even a certain equation, such as the example could be balanced in a different
 way.
\end_layout

\begin_layout Subsubsection
Balancing by Trial and Error
\begin_inset CommandInset label
LatexCommand label
name "sub:Balancing-by-Trial"

\end_inset


\end_layout

\begin_layout Standard
Another unsystematic process is to randomly select coefficients until the
 equation is balanced.
 This process is also unsystematic, but easy to programatically implement.
 The complexity of such a method increases exponentially; for an equation
 with 4 terms and a maximum coefficient of 10, balancing the equation may
 take, at worst, 
\series bold

\begin_inset Formula $10^{4}=10,000$
\end_inset

 
\series default
guesses.
\end_layout

\begin_layout Standard
If we expect that equations will generally have few terms and low coefficients,
 the massive processing power of modern computers will likely make the inefficie
ncy of such a method unnoticeable to user.
 In fact, this method may even perform better on small problems than more
 complex solvers, with fixed costs to create tables and costs per equation
 evaluated.
\end_layout

\begin_layout Standard
Besides the likelihood of the program never terminating when faced with
 a complex equation, this method is also unsatisfying because it is simply
 an application of brute-force, instead of finding a logical solution.
\end_layout

\begin_layout Subsubsection
Balancing using Systems of Linear Equations
\end_layout

\begin_layout Standard
An elegantly logical method is to convert a chemical equation into a system
 of linear equations 
\begin_inset CommandInset citation
LatexCommand cite
key "tuckerman:nyu"

\end_inset

, with one equation representing each element, the number of each element
 representing a coefficient to an unknown variable, representing the chemical
 equation coefficient for a substance.
 To make the system solvable, the first unknown is arbitrarily set to 1.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The representation of a chemical equation as a system of linear equations
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{eqnarray}
\mathrm{H_{2}+O_{2}} & \rightarrow & \mathrm{H_{2}O}\label{eq:lin-ex-eq}\\
a\mathrm{H_{2}+\mathit{b}O_{2}} & \rightarrow & \mathrm{\mathit{c}H_{2}O}\label{eq:lin-ex-vars}\\
\begin{cases}
2a & =2c\\
2b & =c\\
a & =1
\end{cases}\label{eq:lin-ex-sys}
\end{eqnarray}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The resulting values can then be multiplied by the greatest common denominator
 of the values to remove any fractions.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The process of converting a chemical equation to a system of linear equations,
 which is performed by a parser, can be made even simpler to implement by
 creating equations that are all in the same form 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:lin-sys-sys"

\end_inset

 or by creating a matrix 
\begin_inset CommandInset citation
LatexCommand cite
key "eigenstate:chembalancerjs"

\end_inset

 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:lin-sys-matrix"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Systematic representation of chemical equation 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:lin-ex-eq"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align}
 & \begin{cases}
2a+0b-2c & =0\\
0a+2b-1c & =0\\
a & =1
\end{cases}\label{eq:lin-sys-sys}\\
 & \left\{ \begin{array}{ccc|c}
2 & 0 & -2 & 0\\
0 & 2 & -1 & 0
\end{array}\right\} \label{eq:lin-sys-matrix}
\end{align}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Methods of Solving Systems of Linear Equations
\begin_inset CommandInset label
LatexCommand label
name "sub:Methods-of-Solving"

\end_inset


\end_layout

\begin_layout Standard
When a system of linear equations is converted into a matrix, it can be
 solved by performing Gaussian elimination on the matrix.
 
\begin_inset CommandInset citation
LatexCommand cite
key "eigenstate:chembalancerjs"

\end_inset

 The unknowns can then be found from the matrix.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The parser in Chemlogic produces a structure that is then simply transformed
 into a matrix, but it is not solved directly, but is converted into a system
 of linear equations, to take advantage of the built-in linear equation
 solver (CLP(q)) provided by SWI-Prolog.
 
\end_layout

\begin_layout Standard
This allows for provided code to be re-used and makes programming simpler,
 at the cost of inefficient conversions between forms.
\end_layout

\begin_layout Subsection
Using DCGs to Parse Chemical Names, Formulas and Equations
\begin_inset CommandInset label
LatexCommand label
name "sub:Using-DCGs"

\end_inset


\end_layout

\begin_layout Subsubsection
About DCGs
\end_layout

\begin_layout Standard
In any program that deals with user input, the input must be converted into
 a form that can be processed and interpreted.
 This process is called parsing.
\end_layout

\begin_layout Standard
A parser recognizes a formal grammar and can produce structures that can
 be manipulated programmatically from information contained in the inputs.
 The parsing facility provided in many logic programming languages, including
 Prolog, is an implementation of DCGs (Definite Clause Grammars).
\begin_inset CommandInset citation
LatexCommand cite
key "triska:dcg"

\end_inset

 This type of grammar maps a grammatical rule to a logic programming clause.
 They can be simply described as a simplified syntax for creating functions
 that process a grammar using lists.
\end_layout

\begin_layout Standard
In Prolog, DCGs are implemented using difference lists, an extremely efficient
 representation that has many useful properties.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A very simple grammar (binary ionic compounds)
\begin_inset CommandInset label
LatexCommand label
name "fig:simple-grammar"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

compound --> metal, " ",non_metal_base, ide.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

metal --> "sodium".
\end_layout

\begin_layout Plain Layout

metal --> "calcium".
\end_layout

\begin_layout Plain Layout

metal --> "silver".
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

non_metal_base --> "chlor".
\end_layout

\begin_layout Plain Layout

non_metal_base --> "ox".
\end_layout

\begin_layout Plain Layout

non_metal_base --> "sulf".
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ide --> "ide".
\end_layout

\end_inset


\end_layout

\end_inset

Chemlogic uses grammatical rules to describe valid chemical names, formulas
 and equations.
 A simple example is shown in Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:simple-grammar"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Difference Lists and the Implementation of DCGs
\end_layout

\begin_layout Standard
Many programming languages have their own definition for a list.
 In Prolog, a list is a structure consisting of an arbitrary number of elements.
 Elements can be of any valid Prolog data type, most relevantly an atom
 (a single unit of characters) and nested sub-lists.
\end_layout

\begin_layout Standard
Difference lists consist of an instantiated part, the head and an uninstantiated
 part, the tail.
 The tail is always paired with the rest of the list.
 This can be a difficult concept to understand and the major use of difference
 lists is in DCGs, where it is not exposed to the programmer.
 See Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:internal-grammar"

\end_inset

 for an example of difference list usage.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The internal form of the grammar from Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:simple-grammar"

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "fig:internal-grammar"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

compound(Compound, Rest) :-
\end_layout

\begin_layout Plain Layout

	metal(Compound, MetalRest),
\end_layout

\begin_layout Plain Layout

    MetalRest=[' '|SpaceRest],
\end_layout

\begin_layout Plain Layout

	non_metal_base(SpaceRest, NonMetalRest),
\end_layout

\begin_layout Plain Layout

	ide(NonMetalRest, Rest).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

metal([s, o, d, i, u, m|Rest], Rest).
\end_layout

\begin_layout Plain Layout

non_metal_base([c, h, l, o, r|Rest], Rest).
\end_layout

\begin_layout Plain Layout

ide([i, d, e|Rest], Rest).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In DCG clauses, the head is matched with the the input and any remaining
 data is returned as the tail, which is passed to the next clause, which
 performs the same matching until the entire input is parsed and the remaining
 tail is given back to the user (or rejected as a syntax error in Chemlogic).
 If any clause fails, Prolog will backtrack to find another clause that
 can satisfy the grammar.
 If none is found, then the parsing fails.
 To better explain the function of difference lists in practice, a sample
 parsing is shown in Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:trace-grammar"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
An simplified trace of the grammar in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:simple-grammar"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:trace-grammar"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

[trace]  ?- compound("sodium chloride",Rest).
\end_layout

\begin_layout Plain Layout

	metal("sodium chloride", MetalRest)
\end_layout

\begin_layout Plain Layout

metal("sodium chloride", " chloride")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 	non_metal_base("chloride", NonMetalRest)
\end_layout

\begin_layout Plain Layout

non_metal_base("chloride", "ide")
\end_layout

\begin_layout Plain Layout

	ide("ide", IdeRest)
\end_layout

\begin_layout Plain Layout

ide("ide", [])
\end_layout

\begin_layout Plain Layout

compound("sodium chloride", [])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

yes.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
1.
 Parse 
\family typewriter

\begin_inset Quotes eld
\end_inset

sodium chloride
\begin_inset Quotes erd
\end_inset


\family default
 as a compound.
\end_layout

\begin_layout Plain Layout
2.
 Parse 
\family typewriter

\begin_inset Quotes eld
\end_inset

sodium chloride
\begin_inset Quotes erd
\end_inset


\family default
 as a metal leaving 
\family typewriter
MetalRest
\family default
.
\end_layout

\begin_layout Plain Layout
3.
 
\family typewriter

\begin_inset Quotes eld
\end_inset

sodium
\begin_inset Quotes erd
\end_inset


\family default
 is consumed (the head), leaving 
\family typewriter

\begin_inset Quotes eld
\end_inset

 chloride
\begin_inset Quotes erd
\end_inset


\family default
 (the tail).
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
5.
 Parse 
\family typewriter

\begin_inset Quotes eld
\end_inset

chloride
\begin_inset Quotes erd
\end_inset


\family default
 as a non-metal base name leaving 
\family typewriter
NonMetalRest
\family default
.
\end_layout

\begin_layout Plain Layout
6.
 
\family typewriter

\begin_inset Quotes eld
\end_inset

chlor
\begin_inset Quotes erd
\end_inset


\family default
 is consumed (the head), leaving 
\family typewriter

\begin_inset Quotes eld
\end_inset

ide
\begin_inset Quotes erd
\end_inset


\family default
 (the tail).
\end_layout

\begin_layout Plain Layout
7.
 Parse 
\family typewriter

\begin_inset Quotes eld
\end_inset

ide
\begin_inset Quotes erd
\end_inset


\family default
 as an 
\family typewriter
ide
\family default
 terminal.
\end_layout

\begin_layout Plain Layout
8.
 
\family typewriter

\begin_inset Quotes eld
\end_inset

ide
\begin_inset Quotes erd
\end_inset


\family default
 is consumed (the head), leaving the empty list, 
\family typewriter
[]
\family default
 (the tail).
\end_layout

\begin_layout Plain Layout
9.
 Therefore, 
\family typewriter

\begin_inset Quotes eld
\end_inset

sodium chloride
\begin_inset Quotes erd
\end_inset


\family default
 is a compound with no remaining characters.
\end_layout

\begin_layout Plain Layout
10.
 The result of the parsing.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Extra Arguments
\begin_inset CommandInset label
LatexCommand label
name "sub:Extra-Arguments"

\end_inset


\end_layout

\begin_layout Standard
The parsers that have been described so far can only state whether or not
 a given input conforms to a grammar or not (in Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:trace-grammar"

\end_inset

 the answer was 
\begin_inset Quotes eld
\end_inset


\family typewriter
yes
\family default

\begin_inset Quotes erd
\end_inset

 --- it is valid).
 In order to make a program actually perform any tasks, some information
 must be recorded about the input that is parsed (Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:extra-grammar"

\end_inset

).
 This information is then in an internal representation which can be manipulated
 by the other parts of the program.
 Commonly, the internal representation is an Abstract Syntax Tree (implemented
 in Prolog using terms), but in Chemlogic a simple list is used.
 The AST provides the advantage of the various components of the input being
 labeled (e.g.
 
\family typewriter
(metal(Na), non_metal(Cl))
\family default
), but lists are easier to manipulate.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A new version of the parser from Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:simple-grammar"

\end_inset

, using extra arguments and its result
\begin_inset CommandInset label
LatexCommand label
name "fig:extra-grammar"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

compound([Metal,...,NonMetal,...]) --> metal(Metal), " ",
\end_layout

\begin_layout Plain Layout

non_metal_base(NonMetal), ide.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

metal("Na") --> "sodium".
\end_layout

\begin_layout Plain Layout

metal("Ca") --> "calcium".
\end_layout

\begin_layout Plain Layout

metal("Ag") --> "silver".
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

non_metal_base("Cl") --> "chlor".
\end_layout

\begin_layout Plain Layout

non_metal_base("O") --> "ox".
\end_layout

\begin_layout Plain Layout

non_metal_base("S") --> "sulf".
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ide --> "ide".
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
1.
 Extra arguments are passed to the parsing rules.
 The arguments are assembled into a list.
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
3---5.
 Values are provided for these arguments (the element symbol).
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
7---9.
 Values are also provided by this predicate.
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
11.
 This predicate does not record any information.
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

?- compound(Compound,"sodium chloride",Rest).
\end_layout

\begin_layout Plain Layout

	Compound = [['N', a], ..., ['C', l], ...], 
\end_layout

\begin_layout Plain Layout

	Rest = [] .
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
1.
 A new argument is added to the beginning of the query: the 
\family typewriter
Compound
\family default
 structure.
\end_layout

\begin_layout Plain Layout
2.
 The structure created for 
\family typewriter

\begin_inset Quotes eld
\end_inset

sodium chloride
\begin_inset Quotes erd
\end_inset


\family default
 is 
\family typewriter
[Na,...,Cl,...]
\family default
.
\end_layout

\begin_layout Plain Layout
3.
 There is nothing remaining after parsing --- the input conforms to the
 grammar.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Semicontext Notation
\end_layout

\begin_layout Standard
Another difficult concepts in DCGs is semicontext notation.
 It allows elements not originally present in the input being processed
 to be added to the parsing list.
 After the grammar rule is parsed, the pushback list is added to the front
 of the parsing list (see Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:semicontext-grammar"

\end_inset

).
\end_layout

\begin_layout Standard
Semicontext notation can be used to implement lookahead, where a parser
 checks the next element in a list without processing it.
 This is used to make decisions about how to parse a certain element based
 on elements that occur after it.
 A lookahead is implemented by removing the item to be tested, testing it,
 then using the pushback list to put it back on the list of tokens to be
 parsed.
 Decisions can then be made based on the results of the test.
 
\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:lookahead-grammar"

\end_inset

 demonstrates the use of a simple lookahead.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A trivial example and usage of semicontext notation
\begin_inset CommandInset label
LatexCommand label
name "fig:semicontext-grammar"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

censor, 
\end_layout

\begin_layout Plain Layout

	"secret metal" 
\end_layout

\begin_layout Plain Layout

	--> "sodium".
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
1.
 Define a rule called 
\family typewriter
censor
\family default
.
\end_layout

\begin_layout Plain Layout
2.
 Push 
\family typewriter

\begin_inset Quotes eld
\end_inset

secret metal
\begin_inset Quotes erd
\end_inset


\family default
 to the front of the list, if...
\end_layout

\begin_layout Plain Layout
3.
 
\family typewriter

\begin_inset Quotes eld
\end_inset

sodium
\begin_inset Quotes erd
\end_inset


\family default
 is parsed.
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

?- censor("sodium",Rest).
 
\end_layout

\begin_layout Plain Layout

	Rest = "secret metal".
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
1.
 Call our completely useless predicate.
\end_layout

\begin_layout Plain Layout
2.
 Notice that it did not parse anything --- it just made 
\family typewriter

\begin_inset Quotes eld
\end_inset

secret metal
\begin_inset Quotes erd
\end_inset


\family default
 the remaining unparsed list.
\end_layout

\begin_layout Plain Layout
This predicate could perhaps be connected to another rule that processes
 compounds --- it will receive the censored version.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A simple example and usage of a lookahead implemented with semicontext notation
\begin_inset CommandInset label
LatexCommand label
name "fig:lookahead-grammar"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

is_vowel_drop, 
\end_layout

\begin_layout Plain Layout

	[Tested] 
\end_layout

\begin_layout Plain Layout

	--> [Tested], 
\end_layout

\begin_layout Plain Layout

	{Tested = 'a'; Tested = 'o'}.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
1.
 Define a rule called 
\family typewriter
is_vowel_drop
\family default
.
\end_layout

\begin_layout Plain Layout
2.
 Push the content of 
\family typewriter
Tested
\family default
 to the front of the list, if...
\end_layout

\begin_layout Plain Layout
3.
 
\family typewriter
Tested
\family default
 is removed from the list, and...
\end_layout

\begin_layout Plain Layout
4.
 
\family typewriter
Tested
\family default
 is 
\family typewriter
a
\family default
 or 
\family typewriter
o
\family default
.
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

?- is_vowel_drop("oxygen",NonMetal).
 
\end_layout

\begin_layout Plain Layout

NonMetal = [o, x, y, g, e, n].
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

?- is_vowel_drop("chlorine",NonMetal).
 
\end_layout

\begin_layout Plain Layout

false.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
1.
 Should we drop the vowel from our prefix if the non metal is oxygen?
\end_layout

\begin_layout Plain Layout
2.
 Yes! Notice that 
\family typewriter

\begin_inset Quotes eld
\end_inset

oxygen
\begin_inset Quotes erd
\end_inset


\family default
 has been left untampered and can be parsed by a non-metal rule.
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
4.
 Should we drop the vowel from our prefix if the non metal is chlorine?
\end_layout

\begin_layout Plain Layout
5.
 No! Our rule will fail and a clause that doesn't drop the vowel will try
 to process this compound.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Subsection
Notes for the Equation Balancer
\end_layout

\begin_layout Subsubsection
Building the Matrix
\end_layout

\begin_layout Standard
The equation balancer implements the linear equation balancing algorithm
 described in 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Balancing-Chemical"

\end_inset

 in multiple processes.
\end_layout

\begin_layout Standard
First, the parser is configured to produce structures (as described in 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Using-DCGs"

\end_inset

) containing the formulas involved in an equation, the elements involved
 in an equation and a structure grouping the formulas into reactants and
 products (equation structure).
 
\end_layout

\begin_layout Standard
The element structure is sorted and duplicates are removed to produce an
 element set.
\end_layout

\begin_layout Standard
Then, the equation structure is tabulated: a lookup table is produced which
 records the number of occurrences of an element in a given formula.
 Polyatomic groups are flattened by this process (their subscript is distributed
 to their elements and the elements are added by the same process as is
 used when they are on their own).
\begin_inset Foot
status open

\begin_layout Plain Layout
For example: 
\begin_inset Formula $\mathrm{NH_{4}NO_{3}}$
\end_inset

 is flattened to 
\family typewriter
[N2, H4, O3]
\end_layout

\end_inset

.
 The process of creating a lookup table is commonly used in chemical equation
 balancers --- see 
\begin_inset CommandInset citation
LatexCommand cite
key "eigenstate:chembalancerjs"

\end_inset

 for a balancer that uses a roughly similar procedure.
\end_layout

\begin_layout Standard
To finally construct the matrix, each element is evaluated and its count
 in each formula is recorded.
\end_layout

\begin_layout Subsubsection
Solving the Equations
\end_layout

\begin_layout Standard
To use Prolog's built-in equation solver, the matrix is converted back into
 an equation, a process made simple by Prolog's ability to treat code as
 data (metaprogramming, 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Metaprogramming"

\end_inset

).
\end_layout

\begin_layout Standard
The solver used in Chemlogic is CLP(q) (Constraint Logic Programming over
 Rational Numbers)
\begin_inset CommandInset citation
LatexCommand cite
key "holzbaur:clpq"

\end_inset

, which is built-in to SWI-Prolog.
 This solver is used since the coefficients of a chemical equation are always
 rational numbers, but may sometimes not be integers before the fractions
 are cleared.
\begin_inset Foot
status open

\begin_layout Plain Layout
A more common solver, built-in to nearly all Prolog systems, CLPfd (Constraint
 Logic Programming over Finite Domains) had annoying limitations regarding
 this situation.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
CLP(q) allows input of equations in a simple notation and provides the solution
 to the unknowns by instantiating Prolog variables used in the equations.
 The results are always reduced to lowest terms using the provided predicate
 
\family typewriter
bb_inf
\family default
.
\end_layout

\begin_layout Subsubsection
Providing Results to the User
\end_layout

\begin_layout Standard
The solved coefficients are re-inserted into the structures, which are then
 provided as results to a parser.
 The parser returns the input that would create those structures (i.e.
 human-readable equations).
\end_layout

\begin_layout Standard
The program could be made more efficient by not re-parsing the structures
 to provide output, instead inserting the coefficients directly into the
 human-readable input by some method.
\end_layout

\begin_layout Subsection
Notes for the Formula and Name Processing Code
\end_layout

\begin_layout Subsubsection
Validation
\end_layout

\begin_layout Standard
Chemlogic uses a formula parser to convert formulas inputted by users to
 their internal representation in Chemlogic.
 The formulas are verified to ensure that they are in the correct form,
 but whether or not they represent valid compounds is not verified, to support
 balancing equations with types of compounds that are not known to the program.
 When parsing a name or converting a formula to a name, the input is checked
 to ensure that the compounds conform to the types known by Chemlogic.
\end_layout

\begin_layout Subsubsection
DCG Translation
\end_layout

\begin_layout Standard
The chemical information database is not used directly.
 Instead, a file called 
\family typewriter
fact_dcg_translate
\family default
 converts the facts to grammatical rules, providing base names, formulas,
 full names, symbols, etc.
 in whatever output format is selected (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Output-Formatting"

\end_inset

 for a brief discussion of output formats).
\end_layout

\begin_layout Standard
This process is cached when Chemlogic is compiled, so it is only re-run
 when the database is changed.
\end_layout

\begin_layout Subsubsection
Element Structure
\end_layout

\begin_layout Standard
In order to create the element structures used by the balancer, the formula
 and name parsers record the elements contained in the input in a flat structure
 created by using additional difference lists as extra arguments to the
 DCG (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Extra-Arguments"

\end_inset

 for a discussion of extra arguments).
\end_layout

\begin_layout Subsection
Handling User Syntax and other Errors
\end_layout

\begin_layout Subsubsection
About Error Handling in Chemlogic
\end_layout

\begin_layout Standard
The features and algorithms discussed so far deal only with cases when user
 input conforms to the grammars.
 If the user makes a mistake, the only information he is given is 
\begin_inset Quotes eld
\end_inset


\family typewriter
false.
\family default

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
In order to make Chemlogic truly useful, it must identify where in the input
 the problem has occurred and provide clear error guidance.
\end_layout

\begin_layout Standard
Clearly identifying a syntax error is a difficult problem: even many programming
 languages cannot provide clear guidance as to what is wrong.
 Implementing error handling took nearly as long as writing the rest of
 Chemlogic and the process of implementation uncovered a few bugs and poor
 design decisions in the parsers.
\end_layout

\begin_layout Subsubsection
Raising a Syntax Error
\end_layout

\begin_layout Standard
Whenever a predicate that must succeed for a given input to be valid fails,
 a syntax error is raised.
 The error term contains a code name for the error that will be used to
 look up messages and the list of unparsed tokens remaining that can no
 longer be parsed because of this error.
 In Prolog, this is done by 
\family typewriter
throw
\family default
ing an exception.
 Exceptions stop the execution of the program and backtrack through the
 program until a handler can be found --- the 
\family typewriter
catch
\family default
er.
 
\end_layout

\begin_layout Standard
The actual process of raising the syntax error is simplified with the 
\family typewriter
xx
\family default
 operator (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Metaprogramming"

\end_inset

).
\end_layout

\begin_layout Subsubsection
Explaining the Syntax Error
\end_layout

\begin_layout Standard
The exception is then given to the error explaining library.
 It first attempts to localize the error by searching for the problematic
 part in the unparsed tokens.
 It does this by testing the character type of the first character, then
 implementing rules depending on the type (e.g.
 if the first character is a letter, read until a number or capital letter
 is reached, etc.) The erroneous part is recorded.
\end_layout

\begin_layout Standard
Messages are then looked up using the error code and the character type.
 Knowing what type of character has triggered the error can often pinpoint
 the problem and allow for different messages to be used when a logic error
 is suspected (e.g.
 bad letters in a compound name) or when a simple typing error is suspected
 (e.g.
 unusual symbols like ^ in a compound name).
\end_layout

\begin_layout Standard
A structure is created from the information determined by the error explainer.
 It is then re-thrown --- the exception is allowed to pass all the way back
 to the predicate that called the parser.
 The calling predicate is an interface function (from either the command-line
 or the web interface).
 Using metaprogramming techniques, the exception is then given to a handler
 that knows how to render the error in that interface (e.g.
 
\family typewriter
cli_error
\family default
 knows how to highlight the erroneous part using ANSI color).
\end_layout

\begin_layout Subsection
Simplification of Program Code using Metaprogramming
\begin_inset CommandInset label
LatexCommand label
name "sub:Metaprogramming"

\end_inset


\end_layout

\begin_layout Standard
Many functional and logical programming languages, including Prolog have
 strong support for metaprogramming.
 Metaprogramming allows a program to write or manipulate parts of itself
 (or other programs).
 
\begin_inset CommandInset citation
LatexCommand cite
key "wiki:metaprogramming"

\end_inset


\end_layout

\begin_layout Standard
In the Fact---DCG translator (Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:code-as-data"

\end_inset

), data is extracted from a fact and is then reassembled into a new term,
 which is asserted as a grammatical rule.
 This ability to manipulate code as data is a very useful feature.
 In this case, using metaprogramming saves the database builder from manually
 entering data in these awkward forms.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
fact_dcg_translate.pl
\family default
 converting a group fact into a lot of rules
\begin_inset CommandInset label
LatexCommand label
name "fig:code-as-data"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

cl_poly_to_dcg(group([["N",1],["H",4]],"ammonium","n/a")) :-
\end_layout

\begin_layout Plain Layout

	Clause =..
 [_Functor,Sym,Name,Base], 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	dcg_translate_rule(group(ElemsL,ElemsR,Sym,Name) --> Name,FullRule),
\end_layout

\begin_layout Plain Layout

	assertz(FullRule),
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	dcg_translate_rule(group_base(ElemsL,ElemsR,Sym,Base) --> Base,BaseRule),
\end_layout

\begin_layout Plain Layout

	assertz(BaseRule),
\end_layout

\end_inset

1.
 An input clause (code)
\end_layout

\begin_layout Plain Layout
2.
 The clause (code) is separated into data
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
4.
 A new clause (code) is translated from the data
\end_layout

\begin_layout Plain Layout
5.
 The new code is loaded into the program
\end_layout

\end_inset

Chemlogic also makes use of the ability to call an arbitrary predicate at
 runtime (a common programming language feature) to avoid writing many different
 variants of the same predicate (Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:runtime-call"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
covalent.pl using call to implement multiple variants of the same code
\begin_inset CommandInset label
LatexCommand label
name "fig:runtime-call"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

systematic_covalent([[Sym1,Num1],[Sym2,Num2]]) -->
\end_layout

\begin_layout Plain Layout

	covalent_part(nonmetal,Sym1,sub_first,Num1), !,
\end_layout

\begin_layout Plain Layout

	" ",
\end_layout

\begin_layout Plain Layout

	covalent_part(nonmetal_ide,Sym2,sub_general,Num2) xx covalent_part_2.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

covalent_part(SymGoal,Sym,NumGoal,Num) -->  	
\end_layout

\begin_layout Plain Layout

	{fwd_flag(Num,Hack)},  	
\end_layout

\begin_layout Plain Layout

	call(NumGoal,Num,Letter),  	
\end_layout

\begin_layout Plain Layout

	call(SymGoal,Sym,Matched,_),  	
\end_layout

\begin_layout Plain Layout

	( 		
\end_layout

\begin_layout Plain Layout

		{double_vowel_test(Letter,Matched)};  		
\end_layout

\begin_layout Plain Layout

		fwd_stop(Hack,vowel_required) 	
\end_layout

\begin_layout Plain Layout

	).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
2.
 Call a predicate telling it to use non-metal (without ide ending) and prefixes
 for the first element in a compound.
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
4.
 The same predicate now instructed to use non-metal with ide ending and
 to use normal prefix rules
\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
7.
 Doing some processing.
 These lines of code don't have to be written n times.
\end_layout

\begin_layout Plain Layout
8 and 9.
 Call the predicates instructed
\end_layout

\begin_layout Plain Layout
10---13.
 Perform operations on the results of the predicates.
\end_layout

\end_inset

The most interesting use of metaprogramming is the ability to define new
 operators that extend the programming language with a simple syntax for
 a repetitive task.
 
\end_layout

\begin_layout Standard
In Chemlogic, two operators are defined: 
\end_layout

\begin_layout Itemize

\family typewriter
xx
\family default
, the syntax error operator: it executes the predicate on its left-hand
 side and, if it fails, raises the given syntax error on its right-hand
 side.
 It is used in parsers to stop whenever a grammatical rule fails.
 (See Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:xx-operator"

\end_inset

).
\end_layout

\begin_layout Itemize

\family typewriter
handle
\family default
, the error operator: it executes the predicate on its left-hand side and,
 if a syntax error occurs it calls correct handler function for the interface,
 then returns the result on its right-hand side.
 It is used in interface code to show the correct error message
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The 
\family typewriter
xx
\family default
 syntax error operator: Definition and Use
\begin_inset CommandInset label
LatexCommand label
name "fig:xx-operator"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

:- op(990,yfx,xx).
\end_layout

\begin_layout Plain Layout

:- meta_predicate xx(//,?,?,?).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Condition xx (SyntaxError,Flags) -->
\end_layout

\begin_layout Plain Layout

	{Condition = Module:_},
\end_layout

\begin_layout Plain Layout

	(
\end_layout

\begin_layout Plain Layout

		Condition, !; 
\end_layout

\begin_layout Plain Layout

		syntax_stop(Module:SyntaxError,Flags)
\end_layout

\begin_layout Plain Layout

	).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
1.
 Declare 
\family typewriter
xx
\family default
 as an operator
\end_layout

\begin_layout Plain Layout
--
\end_layout

\begin_layout Plain Layout
4.
 Define a predicate
\end_layout

\begin_layout Plain Layout
5---9.
 The operation performed for the given predicate
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

formula(Fmt,Elems,ElemsR,Formula,FormulaR) -->
\end_layout

\begin_layout Plain Layout

	formula_part_first(Fmt,Elems,ElemsR0,Formula,FormulaR0) xx part_first,
\end_layout

\begin_layout Plain Layout

	(hydrate_part(Fmt,ElemsR0,ElemsR,FormulaR0,FormulaR), !).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
---
\end_layout

\begin_layout Plain Layout
2.
 Call 
\family typewriter
formula_part_first
\family default
, otherwise declare a 
\family typewriter
part_first
\family default
 syntax error.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are many potential places where more metaprogramming could be added
 to Chemlogic: the various extra arguments used in the DCGs could be simplified
 with special operators and a goal/term expansion function.
 This would massively simplify the parsers.
 Also, the Web interface has some code that performs the same steps, but
 with different predicates.
 These could be combined with the use of runtime calls.
\end_layout

\begin_layout Section
Interfaces and Miscellaneous Code
\end_layout

\begin_layout Subsection
Android Application --- A new user interface
\end_layout

\begin_layout Subsubsection
Summary
\end_layout

\begin_layout Standard
The Chemlogic App for Android was developed to allow users to use the program
 on a mobile device.
 Due to the popularity of mobile devices and the convience of mobile application
s, this improvement greatly increases the number of users who would use
 the program and enables students to easily use Chemlogic as a study tool
 for chemistry classes.
 
\end_layout

\begin_layout Standard
The existing code of Chemlogic, written in Prolog, was cross-compiled for
 the processors used in Android devices and is used unmodified, simplifying
 the development of new features.
\end_layout

\begin_layout Standard
The App consists of a user-interface, implemented in Java, using the Android
 APIs, and a system package consisting of the cross-compiled Chemlogic code,
 and its dependencies.
\end_layout

\begin_layout Subsubsection
The Implementation of the User Interface and the System Package
\end_layout

\begin_layout Standard
The user interface renders the design of the app (textboxes, buttons, etc.),
 verifies the input to ensure that it does not contain invalid Prolog syntax
 and then communicates with Chemlogic through a UNIX pipe.
 Upon receiving the response, it renders the formatting of the result (e.g.
 subscripts, arrows and colored error messages) and displays it.
 The user interface also adds an extra row of keys to the keyboard which
 contains symbols commonly used in chemical equations and formulas.
\end_layout

\begin_layout Standard
The system package, which is approximately 4 MB in size, contains a copy
 of Chemlogic, compiled as a stand-alone application (meaning that it includes
 the Prolog interpreter in its binary), some required Linux libraries and
 an initialization script.
 When loaded, the App interface executes the initialization script, which
 starts Chemlogic by running the dynamic linker to locate and link Chemlogic
 with the provided libraries and then executes it.
 The cross-compilation process required to build the system package is extremely
 complicated, so it has been automated to reduce developer work and eliminate
 errors.
 Because the Android platform does not install the assets provided with
 the App, a procedure was implemented that verifies whether latest version
 of the system package is present and will extract the files and install
 them, if necessary.
\end_layout

\begin_layout Standard
Once Chemlogic is installed and started, the user interface writes a command
 to the pipe, when Chemlogic reads.
 Chemlogic writes its answer to the pipe, which the interface reads.
 This method could be replaced with bindings between Prolog and Java, which
 would simplify the development of the App, but would increase the complexity
 of the cross-compilation process.
\end_layout

\begin_layout Subsubsection
Interprocess Communication in the App 
\end_layout

\begin_layout Standard
The pipe model is, however, one of the most interesting parts of the UNIX
 model: everything is a file, everything is text, anything can read text
 and anything can write text.
 It allows many utilities to be connected to each other, each reading the
 previous one's output and writing to the next one.
 User input/output is, in fact, implemented using this model as well: the
 keyboard is piped to the input and the output is piped to the screen.
 This method of interprocess communication raises an interesting dilemma:
 How do the interface and Chemlogic know when the other end of the pipe
 finishes transmitting data (like a query or a response)? 
\end_layout

\begin_layout Standard
Unlike a subroutine which automatically returns a variable to its caller,
 the two programs must be explicitly instructed to look for a specific pattern
 in order to know when to proceed.
 
\end_layout

\begin_layout Standard
When a user interacts with a command-line program, patterns are recognized
 by both the human user and the program itself: When the user enters a command,
 he presses ENTER.
 Now the system sees that the user has finished typing and it processes
 the input and displays its response.
 When the interactive prompt is displayed, the user sees that the system
 is ready to receive another query.
 The user interface and the Android App use these patterns, as well, allowing
 existing code to be used with minor modifications.
\end_layout

\begin_layout Standard
It must be noted that although the pipe model would seem to imply transmission
 and communication between computers (and often can), in this case the communica
tion is entirely virtual --- it is between multiple processes on the same
 computer.
 The mechanism is almost exactly the same from the point of view of the
 two programs that are communicating over the pipe.
\end_layout

\begin_layout Subsection
Web Interface --- A user-friendly way of using the program
\end_layout

\begin_layout Subsubsection
Advantages of Web Interfaces
\end_layout

\begin_layout Standard
Command-line interfaces are often not user-friendly.
 Terminals also cannot display subscripts and special characters, making
 the output an approximation of the correct form of an equation or formula.
 
\end_layout

\begin_layout Standard
A web interface can provide a graphical interface to a program, making it
 simple to use select features and options, that is also available over
 the network.
\begin_inset Foot
status open

\begin_layout Plain Layout
This allows an entire computer lab to use a single copy of Chemlogic installed
 on a server, for example.
\end_layout

\begin_layout Plain Layout
If a copy of the 
\family typewriter
chemweb
\family default
 (the web interface is running), users can access it by going to:
\end_layout

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://<ip-address>:8000/chemlogic/
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
SWI-Prolog's Web stack
\end_layout

\begin_layout Standard
SWI-Prolog has a built-in Web stack, 
\begin_inset CommandInset citation
LatexCommand cite
key "wielemaker:tplp2008"

\end_inset

 providing a server that can run Prolog programs and send their output over
 HTTP.
 To avoid writing HTML manually and handling arguments, SWI-Prolog provides
 an excellent library that allows HTML to be written as Prolog terms and
 input to be validated.
 To keep code organized, a library that can insert menus, stylesheets and
 other header elements.
 These features make writing Web applications in Prolog even simpler than
 in many common languages used in Web programming.
\end_layout

\begin_layout Standard
The web libraries make excellent use of DCGs and metaprogramming in their
 implementations, making code easy to understand.
\end_layout

\begin_layout Subsubsection
Output Formatting
\begin_inset CommandInset label
LatexCommand label
name "sub:Output-Formatting"

\end_inset


\end_layout

\begin_layout Standard
In order to produce the correct formatting codes for each interface (HTML
 entities in this case), the handling of symbols is decoupled from the various
 parsers and is instead implemented in a common formatting library.
 This allows for readable and correct formatting in the Web interface.
\end_layout

\begin_layout Subsection
Command-line Interface --- An extremely simple DSL
\begin_inset CommandInset label
LatexCommand label
name "sub:Command-line-Interface"

\end_inset


\end_layout

\begin_layout Standard
During the development of Chemlogic, it was often necessary to run various
 predicates in order to test the program.
 Calling Prolog predicates, as is, is not a user-friendly command-line interface
, however.
 It requires the user to enter his query as a Prolog statement and gives
 back the answer as a list of characters.
\end_layout

\begin_layout Standard
Using metaprogramming techniques, like defining operators, calling at runtime
 and syntactic unification, it possible to build a very simple DSL (domain
 specific language) for querying Chemlogic (see Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:dsl"

\end_inset

).
 Despite the fact that it only implements 4 simple features, with 2 rules,
 language statements can be composed into more complex programs.
 Prolog statements can also be used in the DSL and language statements can
 be combined with Prolog statements seamlessly.
\end_layout

\begin_layout Standard
The DSL offers an elegant way of balancing chemical equations and converting
 formulas to names and vice versa by offering a simplified syntax and automatic
 conversions to and from Prolog strings (see Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:dsl-usage"

\end_inset

).
\end_layout

\begin_layout Standard
Because of its simplicity, the DSL is mostly a proof of concept and more
 syntax will need to be added (and the features to expose from Chemlogic)
 to make writing it possible to write interesting programs in this language.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The entire code of the 
\family typewriter
chemcli
\family default
 DSL 
\begin_inset CommandInset label
LatexCommand label
name "fig:dsl"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

:- op(990,xfy,::).
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

InputType - Input :: -Result :-
\end_layout

\begin_layout Plain Layout

	InputType - Input :: symbolic - Result, !.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

InputType - AtomInput :: ResultType - Result :-
\end_layout

\begin_layout Plain Layout

	atom_chars(AtomInput,Input),
\end_layout

\begin_layout Plain Layout

	(
\end_layout

\begin_layout Plain Layout

		InputType = name -> name_2_formula(Input,StringRes) handle _;
\end_layout

\begin_layout Plain Layout

		InputType = formula -> formula_2_name(Input,StringRes) handle _;
\end_layout

\begin_layout Plain Layout

		balance_equation(InputType,Input,ResultType,StringRes) handle _ 
\end_layout

\begin_layout Plain Layout

	), 	
\end_layout

\begin_layout Plain Layout

	atom_chars(Result,StringRes).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
A programming language in 13 lines of code.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Simple 
\family typewriter
chemcli
\family default
 queries and an example of a program that can be written using it
\begin_inset CommandInset label
LatexCommand label
name "fig:dsl-usage"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

?- formula - 'CuCl2' :: -Name.
\end_layout

\begin_layout Plain Layout

Name = 'copper(II) chloride'.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
1.
 Input a formula, get default output.
\end_layout

\begin_layout Plain Layout
2.
 The result, with human readable formatting.
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left"
inline false
status open

\begin_layout Plain Layout

?- name - 'baking soda' :: -F, formula - F :: -CanonicalName.
\end_layout

\begin_layout Plain Layout

F = 'NaHCO3',
\end_layout

\begin_layout Plain Layout

CanonicalName = 'sodium hydrogen carbonate'.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
1.
 This line finds the 
\begin_inset Quotes eld
\end_inset

canonical
\begin_inset Quotes erd
\end_inset

 name for a compound when given another name for it.
\end_layout

\begin_layout Plain Layout
2.
 The name is converted to a formula.
\end_layout

\begin_layout Plain Layout
3.
 ...and back into a now systematic name.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Subsection
Suitability of Prolog for application
\end_layout

\begin_layout Standard
Initially, Prolog was chosen because of its simple fact database and built-in
 support for parsers as DCGs and for linear equation solvers.
 Using a logic programming language would also reduce programmer work by
 describing the results, not the process and by offering metaprogramming
 features.
\end_layout

\begin_layout Standard
In practice, the simple fact database was no more convenient than in any
 other programming language because the facts (the chemical information
 database) had to be converted to DCG rules by a translator in order for
 them to be used efficiently and correctly in parsers.
\end_layout

\begin_layout Standard
DCG support in Prolog and similar languages makes it possible to easily
 write parser for all sorts of grammars.
 In most programming languages, the programmer must write the parser from
 scratch or use a contributed library.
 Chemlogic ended up using many advanced features of DCGs, including extra
 arguments for constructing parsing structures, using the underlying difference
 list representation for certain structures and using semicontext notation
 for some simple lookahead rules.
\end_layout

\begin_layout Standard
In some places, parsing rules have become complicated and hacky, but overall
 DCGs have made it simpler and more logical to construct grammars and extend
 them for many types of data a chemistry program uses.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

As discussed in the section on the linear equation balancing algorithm (
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Methods-of-Solving"

\end_inset

), using Prolog's linear equation solver entails producing a system of linear
 equations, which is probably re-converted to a matrix in order to be solved.
 Using the library certainly simplified the code, because matrix operations
 are difficult in many Programming languages and because implementing Gaussian
 elimination requires a lot of mathematical understanding.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Using a logic programming language made the code simpler and more elegant.
 While the idea of describing results instead of process is somewhat exaggerated
, programming in Prolog avoids manual writing of loops, if statements and
 other imperative constructs.
 It can be rather amazing, when a situation can finally explained in Prolog,
 how few lines of code are necessary to do something.
 
\begin_inset Foot
status open

\begin_layout Plain Layout
Perhaps this is why Prolog programmers name their variables A, X, Acc, H,
 T, R0, etc and do not document things in detail?
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Metaprogramming was not used heavily but it proved to make code simpler
 by allowing predicates to be generated from other predicates, by allowing
 predicates that call other predicates and by defining convenient operators.
 This last aspect proved to be the most interesting and was used as the
 basis of the extremely simple 
\family typewriter
chemcli
\family default
 DSL (
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Command-line-Interface"

\end_inset

).
 The support of metaprogramming is more extensive in Prolog than in many
 languages and it was relatively simple to make use of this support.
\end_layout

\begin_layout Subsection
Methods of Analyzing Performance in Prolog
\begin_inset CommandInset label
LatexCommand label
name "sub:Methods-of-Analyzing"

\end_inset


\end_layout

\begin_layout Standard
SWI-Prolog, like many programming language implementations, offers a few
 tools for analyzing a program's performance.
 It includes 
\family typewriter
gxprof
\family default
 (A graphical profiler), 
\family typewriter
time
\family default
 (a command-line predicate offering a few simple statistics) and 
\family typewriter
statistics
\family default
 (a command-line predicate offering very detailed runtime statistics).
\end_layout

\begin_layout Standard

\family typewriter
gxprof
\family default
 primarily performs time efficiency analyses, which were often not useful
 for Chemlogic because the time taken by different implementations were
 often so small as to be incomparable.
 Therefore it was not used during the development of Chemlogic.
\end_layout

\begin_layout Standard
The most commonly used analysis function was 
\family typewriter
time
\family default
, which provides a few interesting statistics, including inferences and
 Lips (logical inferences per second?).
 I am unsure of exactly what the inference count measures or its connection
 to the actual performance of the algorithm.
 Inferences were a useful way of comparing algorithms and implementations
 because it gave consistent results between runs and on different computers.
\end_layout

\begin_layout Standard
Analysis was performed mostly by recording the performance of an predicate
 for arguments of various sizes to try to find the fixed costs (intercept)
 and cost per element (slope) and to ensure that there were no algorithms
 with exponential cost.
 Inefficient pieces of code were found using the debugger and new solutions
 were compared against old ones.
\end_layout

\begin_layout Standard

\family typewriter
statistics
\family default
 may provide details that could be useful for future research, but on a
 small program like Chemlogic analyzing some of these statistics may be
 overly complicated.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

It must be noted that the performance of algorithms was not formally analyzed
 (by creating mathematical definitions and determining the fastest growing
 terms to find the worst-case performance, for example) primarily because
 no novel algorithms were introduced in this program, nor unusual adaptations.
\end_layout

\begin_layout Standard
Formal analysis of a specific parser may enable useful improvements to be
 made.
\end_layout

\begin_layout Subsection
Organization and Structure of Code
\end_layout

\begin_layout Standard
The organization of code is quite clear overall.
 I have tried to follow proper naming, indention and structuring practices.
 Prolog allows for code to be separated into modules with private predicates
 used only inside a single module and public predicates that are useful
 to other modules.
 Modules were frequently used to organize Chemlogic.
\end_layout

\begin_layout Subsubsection
Modularity of Interfaces and Error Handlers
\end_layout

\begin_layout Standard
Since Chemlogic needed to support a Web interface to its Prolog predicates
 which were used from the command-line, it was very important to allow for
 the de-coupling of formatting and interfaces from the code itself.
 The interfaces for Chemlogic often implement the bare-minimum required
 to make the program modular, but there are a few over-engineered parts
 that may prove useful when improving the detail of error messages.
\end_layout

\begin_layout Standard
The error handling system itself was an experiment, using Prolog exceptions,
 handlers and meta-predicates that call modules.
 The design of the error handling system is modular and relatively organized,
 but more experience with Prolog exceptions may allow for improvements to
 the design.
\end_layout

\begin_layout Subsubsection
Some Confusing Points
\end_layout

\begin_layout Standard
There are few confusing interactions between pieces of code, with a few
 small cases between the ionic, oxyanion and acid functions.
 The lack of a tokenizer proved to make implementing error handling problematic
 in some places, as it was always necessary to determine whether or not
 a certain parser can safely give error messages or whether it must simply
 fail and give the next parser a chance to process the input.
 A tokenizer can quickly determine which parser to use and avoid problems
 like these.
\end_layout

\begin_layout Standard
Some inefficient tokenizers are used to highlight the erroneous component
 of user input.
 Since they are used only when a problem occurs, they are not much of a
 concern.
\end_layout

\begin_layout Standard
The only uses of semicontext notation in this program were some hacks to
 allow naming for pure substances to avoid triggering error messages.
 This is a good place to target for improvement if a tokenizer is introduced.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection
A Note about Covalent Prefixes
\end_layout

\begin_layout Standard
Correctly handling the rule that the last vowel (if a or o) of an IUPAC
 prefix is dropped if the succeeding element starts with an a or o was quite
 difficult to implement.
 Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:vowel-dropping"

\end_inset

 shows some examples of the rule.
 
\end_layout

\begin_layout Standard
It seems to me that this is a case of a Context-Sensitive Grammar, where
 a certain token may or may not be permitted at a certain point given its
 preceding token.
\end_layout

\begin_layout Standard
Currently a repeated test and a metaprogramming call is used to determine
 the right prefix to use.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Examples of vowel dropping in IUPAC prefixes
\begin_inset CommandInset label
LatexCommand label
name "fig:vowel-dropping"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prefix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Element
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Result
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mono
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
oxygen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
mon
\series default
oxygen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mono
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
carbon
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
mono
\series default
carbon
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tetra
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
oxygen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
tetr
\series default
oxygen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tri
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
iodine
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
tri
\series default
iodine
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tokenizers: Simpler and More Performant Code
\end_layout

\begin_layout Standard
Very recently, SWI-Prolog introduced a new string type.
 
\begin_inset CommandInset citation
LatexCommand cite
key "swi:doublequote"

\end_inset

 The string type solves many problems that have traditionally required complicat
ed workarounds in Prolog.
\end_layout

\begin_layout Standard
The type replaces the use of atoms for manipulated strings, or lists of
 character codes with a more efficient data structure.
 The most important (for Chemlogic) change is the introduction of a predicate
 (split_string/4) which allows for a string to be broken into parts delimited
 by a character and allows extraneous padding characters to be removed.
 The string type can still be operated on as a list of character codes when
 needed (as in DCGs).
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The benefits to a program like Chemlogic from this change are quite large:
 it is now simple to implement a tokenization step for the various parsers,
 like most compilers and interpreters (You will recall that Chemlogic does
 not tokenize its strings before parsing them).
\end_layout

\begin_layout Standard
Currently, when processing a string like 
\begin_inset Quotes eld
\end_inset

carbon monoxide
\begin_inset Quotes erd
\end_inset

, the program must go through many testing steps (is it an ionic compound,
 is carbon a metal, is it an acid, is carbon a polyatomic ion, and their
 many sub-tests etc.) But, if the string is tokenized into [
\begin_inset Quotes eld
\end_inset

carbon
\begin_inset Quotes erd
\end_inset

,
\begin_inset Quotes erd
\end_inset

monoxide
\begin_inset Quotes erd
\end_inset

], it is obvious it is not an ionic compound, because the first token is
 not a metal and its obvious that it is not an acid because the second part
 is not 
\begin_inset Quotes eld
\end_inset

acid
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
In the case of determining if it is an acid, tokenization makes implementing
 a lookahead parser simpler: one element lookahead instead of 
\begin_inset Formula $n$
\end_inset

 character lookahead (because it is not yet known how long the first part
 of a string is in that case).
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The tokenizers currently in use for error parsing may be able to be re-written
 in a simpler way using the new string type.
\end_layout

\begin_layout Subsection
Ideas for Additional Features
\end_layout

\begin_layout Standard
Many ideas for new features are discussed from a programmatical perspective
 in the 
\family typewriter
TODO
\family default
 file distributed with the program and as an appendix to this paper (Appendix
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:TODO"

\end_inset

).
 Some of them are summarized here:
\end_layout

\begin_layout Standard
In order to handle more complex types of organic compounds, the program
 must be greatly extended to support manipulating structural formulas (when
 given a name as input), displaying diagrams of them and to support an input
 method for structural formulas.
 Since balancing and many other parts of the program operate using molecular
 or empirical formulas, a module can be written to 
\begin_inset Quotes eld
\end_inset

flatten
\begin_inset Quotes erd
\end_inset

 structural formulas, allowing for code to be re-used.
\end_layout

\begin_layout Subsection
Further Research
\end_layout

\begin_layout Subsubsection
Algorithms
\end_layout

\begin_layout Standard
As discussed in 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Balancing-by-Trial"

\end_inset

 (Balancing by Trial and Error), the performance of the trial and error
 algorithm may be better than the system of linear equations algorithm for
 simple cases.
 It would be interesting to compare the algorithms using the inference testing
 method described in 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Methods-of-Analyzing"

\end_inset

.
 The performance of this algorithm will depend on the efficiency of a test
 for whether the equation is balanced or not.
 The ranges of complexity in which each algorithm performs better and the
 appropriate algorithm selected for a specific balancing.
\end_layout

\begin_layout Standard
If Chemlogic is re-implemented, with an initial tokenization step, the performan
ce of the program (both using inference testing and wall-time measurements,
 if possible.
 
\begin_inset Foot
status open

\begin_layout Plain Layout
Currently the individual algorithms in Chemlogic do not take more than 
\begin_inset Formula $\unit[0.005]{s}$
\end_inset

 to run.
 The new algorithm may perform in similar time, or the time may be affected
 by other factors.
\end_layout

\end_inset

) before and after the change can be compared.
 The cleanliness and simplicity of the code, in practice, should also be
 compared.
 Such a change may also improve the quality of the error messages.
\end_layout

\begin_layout Subsubsection
Performance Analysis of the Whole Program
\end_layout

\begin_layout Standard
As described in 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Methods-of-Analyzing"

\end_inset

, performance analysis was performed mostly on small components of a program.
 But since changes in one part may affect another part, it will be useful
 to make comparisons over an entire program for a given input in order to
 find out if a certain algorithm is truly better or if it simply off-loads
 costs elsewhere.
\end_layout

\begin_layout Subsubsection
Balancing for Complex Redox Reactions
\end_layout

\begin_layout Standard
For some difficult redox reactions, the currently used algorithm will produce
 a solution that satisfies the system of linear equations, and therefore
 is balanced, but is not actually what occurs when the reaction takes place.
\end_layout

\begin_layout Standard
This is because the system of linear equations has more than one solution,
 and the solver always picks the simplest form.
\end_layout

\begin_layout Standard
To correctly handle these types of equations, it will be necessary to find
 under what conditions this problem occurs.
 It will also be necessary to determine how to distinguish between the various
 solutions and determine the correct one.
\end_layout

\begin_layout Standard
It will perhaps be necessary to write a new algorithm for balancing, based
 on oxidation numbers or perhaps on half-reactions.
\end_layout

\begin_layout Standard
This algorithm will not be necessary in all cases.
 It may be possible to determine when to use this algorithm.
 Otherwise, a user-selected option will be necessary (the 
\begin_inset Quotes eld
\end_inset

Complex Redox
\begin_inset Quotes erd
\end_inset

 tab).
\end_layout

\begin_layout Subsubsection
Messages and User Communications
\end_layout

\begin_layout Standard
The messages in Chemlogic have been written to explain, primarily, the specific
 syntax error a user is making and how the syntax error relates to Chemistry.
 The messages have been reviewed and were simplified, corrected or clarified
 according to advice.
\end_layout

\begin_layout Standard
The messages are written at a high-level, discuss the Chemistry in abstract
 and often refer to the idea of unnecessary or incorrect characters.
 Testing the error messages produced by the program with actual users (Science
 students) will make the program more useful as a means of reviewing Chemistry.
 It may be necessary, perhaps, to adjust the messages to make them more
 clear, given what triggers them most, in practice.
 Perhaps it would be useful to refer the user to sections from a textbook.
\end_layout

\begin_layout Standard
Improvements to the error handling functionality could allow for further
 distinctions in the errors triggered, beyond error code and token type.
 A particularly useful, but tedious, change would be to use templates to
 insert specific information about the problem in a given input (see Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:error-improvements"

\end_inset

 for an example).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Error messages for a missing charge on a multivalent metal
\begin_inset CommandInset label
LatexCommand label
name "fig:error-improvements"

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Current error message
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The element you have entered is multivalent.
 You must provide the charge in the highlighted space.
 
\end_layout

\begin_layout Plain Layout
NOTE: Use capital roman numerals in parentheses
\end_layout

\begin_layout Plain Layout
e.g.
 (II)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Improved error message exposing chemical information
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The element you have entered is multivalent.
 You must provide the charge in the highlighted space.
 
\end_layout

\begin_layout Plain Layout

\series bold
Copper ions have the following charges: 
\begin_inset Formula $\mathrm{Cu^{+}}$
\end_inset

 --- copper(I) and 
\begin_inset Formula $\mathrm{Cu^{2+}}$
\end_inset

 --- copper(II)
\end_layout

\begin_layout Plain Layout
NOTE: Use capital roman numerals in parentheses 
\end_layout

\begin_layout Plain Layout
e.g.
 (II)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Acknowledgments
\end_layout

\begin_layout Standard
I would like to thank the many people who gave advice and helped with the
 project.
\end_layout

\begin_layout Standard
I am particularly grateful for the valuable assistance provided by Dr.
 Peter Tchir, my Physics, Chemistry and, now, Computer Science teacher.
 His help and advice, especially with algorithms and his support for my
 Computer Science projects helped make this program possible.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "chemlogic"
options "amsplain"

\end_inset


\end_layout

\begin_layout Section
\start_of_appendix
Obtaining Chemlogic
\begin_inset CommandInset label
LatexCommand label
name "sec:Obtaining-Chemlogic"

\end_inset


\end_layout

\begin_layout Standard
Chemlogic is available from 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://icebergsystems.ca/chemlogic/
\end_layout

\end_inset

.
 Chemlogic currently depends on SWI-Prolog (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://swi-prolog.org/
\end_layout

\end_inset

) because it uses CLP(q), Qsave files and a few other features.
 See the 
\family typewriter
README
\family default
 file distributed with the program for installation instructions.
 The installer can be used on any Unix-like system (Linux, BSD, Mac OS X)
 as is.
 The program itself will run on any operating system SWI-Prolog runs on
 (incl.
 Windows).
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Chemlogic is an open-source program licensed under the GNU Affero GPL v.3
 (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.gnu.org/licenses/agpl-3.0.html
\end_layout

\end_inset

).
 Users of open-source programs are free to use, modify and distribute them
 even for profit.
 Copyleft licenses (like the one used for this program) also require that
 any changes to the program that are distributed must also be released as
 open-source software.
\end_layout

\begin_layout Standard
The AGPL requires that modified versions offered as a network service are
 also released as open-source software.
 If this requirement is inconvenient, please contact me.
\end_layout

\begin_layout Section
User Reference
\begin_inset CommandInset label
LatexCommand label
name "sec:User-Quick"

\end_inset


\end_layout

\begin_layout Subsection
Formulas
\end_layout

\begin_layout Description
Formula CH4, Na2CO3.10H20, (NH4)2SO4
\end_layout

\begin_layout Subsection
Chemical Equations
\end_layout

\begin_layout Description
Symbolic CH4 + O2 --> CO2 + H2O
\end_layout

\begin_layout Description
Word methane + oxygen --> carbon dioxide + water
\end_layout

\begin_layout Subsection
Chemical Names
\end_layout

\begin_layout Description
Retained
\begin_inset space ~
\end_inset

Names
\series medium

\begin_inset space ~
\end_inset


\emph on
(preferred)
\series default
\emph default
 water, ammonia
\end_layout

\begin_layout Description
Ionic copper(II) chloride, sodium carbonate decahydrate, calcium chloride
\end_layout

\begin_layout Description
Acids hydrocyanic acid, acetic acid, sulfuric acid, hypochlorous acid
\end_layout

\begin_layout Description
Covalent carbon monoxide, trichloride triiodide, dihydrogen monoxide
\end_layout

\begin_layout Description
Pure
\begin_inset space ~
\end_inset

Substances/Allotropes copper, silicon, trioxygen, hydrogen (
\begin_inset Formula $\mathrm{=H_{2}}$
\end_inset

)
\end_layout

\begin_layout Description
Common
\begin_inset space ~
\end_inset

Names
\begin_inset space ~
\end_inset


\series medium
\emph on
(accepted
\begin_inset space ~
\end_inset

but
\begin_inset space ~
\end_inset

not
\begin_inset space ~
\end_inset

produced)
\series default
\emph default
 baking soda, chalk, hydrogen peroxide
\end_layout

\begin_layout Section

\family typewriter
TODO
\family default
 
\begin_inset CommandInset label
LatexCommand label
name "sec:TODO"

\end_inset


\end_layout

\begin_layout Subsection
Chemistry features
\end_layout

\begin_layout Itemize
 Support for structural formulas: 
\end_layout

\begin_deeper
\begin_layout Itemize
 The covalent parser will have to be extended very much, to handle structures
 of the compounds it supports 
\end_layout

\begin_layout Itemize
 The formula parser will need to have some sort of input and output representati
on for structural formulas
\end_layout

\begin_layout Itemize
 Each output format will have its own ways of rendering structural formulas.
 This will have to be extended.
\end_layout

\begin_layout Itemize
A module will be needed to convert structural formulas to molecular formulas
 for balancing and other processes.
\end_layout

\end_deeper
\begin_layout Itemize
 More organic naming: 
\end_layout

\begin_deeper
\begin_layout Itemize
 It will be useful to implement organic compound naming at least for Chemistry
 11 to 12.
\end_layout

\end_deeper
\begin_layout Itemize
 Complex Redox reactions: 
\end_layout

\begin_deeper
\begin_layout Itemize
 Sometimes, for a few very complex redox reactions, Chemlogic gives an answer
 that satisfies the system of linear equations (i.e.
 is balanced) but will not actually occur in real life.
 
\end_layout

\begin_layout Itemize
 A new balancing process, with a separate module should be implemented.
 Perhaps based on oxidation numbers or half-reactions
\end_layout

\end_deeper
\begin_layout Itemize
 Diagramming: 
\end_layout

\begin_deeper
\begin_layout Itemize
 Show structural formulas of compounds 
\end_layout

\begin_layout Itemize
 Bohr models, Lewis diagrams 
\end_layout

\begin_layout Itemize
Periodic tables?
\end_layout

\end_deeper
\begin_layout Subsection
Program features
\end_layout

\begin_layout Itemize
 Extend the 
\family typewriter
chemcli
\family default
 DSL to make it more useful.
 
\end_layout

\begin_deeper
\begin_layout Itemize
 Offer a way to query the chemical information database.
 
\end_layout

\begin_layout Itemize
 More constructs/operators.
\end_layout

\begin_layout Itemize
 A standard library? 
\end_layout

\begin_layout Itemize
 This will all depend on the sorts of programs that someone will actually
 want to write
\end_layout

\end_deeper
\begin_layout Itemize
 Quiz program 
\end_layout

\begin_deeper
\begin_layout Itemize
Allow for questions to be generated with selectable options (the parser
 and perhaps major sub-parts)
\end_layout

\begin_layout Itemize
 Interactive and non-interactive usage depending on output format 
\end_layout

\begin_layout Itemize
 Configurable marking (allow retry, show correct answer at end, etc.) 
\end_layout

\begin_layout Itemize
 Possible to produce the same questions if passed the same seed.
  Some sort of intelligence, focusing on problem areas when giving questions.
\end_layout

\end_deeper
\begin_layout Itemize
 Expose the chemical information database.
\end_layout

\begin_layout Itemize
 Better error messages for equation balancing errors 
\end_layout

\begin_deeper
\begin_layout Itemize
 Test to ensure that all elements appear in both products and reactants
\end_layout

\begin_layout Itemize
 Perhaps explain why some charge shifts are unsatisfied 
\end_layout

\begin_layout Itemize
 Explain which element makes the system unbalancable, if possible.
\end_layout

\end_deeper
\begin_layout Subsection
Organization and Structure
\end_layout

\begin_layout Itemize
Take advantage of SWI-Prolog's new string type.
 This makes tokenization, concatenation and many other things more efficient.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Chemlogic needs a simple tokenizer to break up chemical names and equations
 (especially) 
\end_layout

\begin_layout Itemize
 At minimum, it should split on spaces and remove extraneous spaces 
\end_layout

\begin_layout Itemize
 Potentially deal with character types? 
\end_layout

\begin_layout Itemize
 Potentially deal with the insides of parentheses? 
\end_layout

\end_deeper
\begin_layout Itemize
 Rewrite the current error tokenizers to use the new and better functions
 
\end_layout

\begin_layout Itemize
 Tokenizers make parser much, much nicer: 
\end_layout

\begin_deeper
\begin_layout Itemize
 It is now quick and simple to see if something is an acid without having
 to go through all of the tests 
\end_layout

\begin_layout Itemize
 It can be easy to distinguish between ionic and covalent
\end_layout

\end_deeper
\begin_layout Itemize
 Make the oxyanion functions less messy and hacky.
 There must be a better way to tell the user what's wrong with the oxyanion
 names.
 
\end_layout

\begin_layout Itemize
 The ugly hacks around pure substances can be removed with a better tokenizer
\end_layout

\begin_layout Itemize
 Some things will need to be renamed and reorganized
\end_layout

\begin_layout Itemize
 Use more meta-programming to remove boilerplate code from the web interface.
\end_layout

\begin_layout Subsection
Bugs
\end_layout

\begin_layout Itemize
 The program will get very upset if a substance is repeated:
\end_layout

\begin_deeper
\begin_layout Itemize
 e.g.
 H2O + H2O --> H2O 
\end_layout

\begin_layout Itemize
 There is not much of a valid reason to enter this, but the program should
 handle this correctly 
\end_layout

\begin_layout Itemize
 An error message explaining that this is junk is probably a good idea
\end_layout

\end_deeper
\end_body
\end_document
